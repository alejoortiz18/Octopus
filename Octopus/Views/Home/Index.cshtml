@using Models.Model.Usuario
@model UsuarioReferidoViewModel


<div>
    <nav class="navbar navbar-main navbar-expand-lg px-0 mx-4 shadow-none border-radius-xl" id="navbarBlur" navbar-scroll="true" style="place-self: center;">
        <div class="container-fluid py-1 px-3">
            <nav aria-label="breadcrumb">
                <h6 class="font-weight-bolder mb-0 text-center fw-bold" style="font-size: 2rem;">MI RED </h6>
            </nav>
        </div>
    </nav>
</div>


<div class="container py-4">
    <!-- NIVEL 0 -->
    <div id="nivel-0" class="mb-4">
        <div class="row justify-content-start g-4">
            @Html.Partial("_TarjetaUsuario", Model)
        </div>
    </div>

    <!-- NIVEL 1 -->
    <div id="nivel-1" class="mb-4">
        <div class="row justify-content-start g-4"></div>
    </div>

    <!-- NIVEL 2 -->
    <div id="nivel-2" class="mb-4">
        <div class="row justify-content-start g-4"></div>
    </div>

    <!-- NIVEL 3 -->
    <div id="nivel-3" class="mb-4">
        <div class="row justify-content-start g-4"></div>
    </div>

    <!-- NIVEL 4 -->
    <div id="nivel-4" class="mb-4">
        <div class="row justify-content-start g-4"></div>
    </div>
</div>

@section Scripts {
    <script>
        async function toggleReferidosDinamico(usuarioId, nivelOrBtn, btnMaybe) {
          const maxLevel = 4;
          let nivel, btn;

          // --- Determinar qué opción usamos ---
          if (typeof nivelOrBtn === 'number') {
            // Opción A: recibimos (usuarioId, nivel, btn)
            nivel = nivelOrBtn;
            btn    = btnMaybe;
          } else {
            // Opción B: recibimos (usuarioId, btn)
            btn    = nivelOrBtn;
            // sacamos el nivel del contenedor padre cuyo id es "nivel-X"
            const cont = btn.closest('[id^="nivel-"]');
            nivel = parseInt(cont.id.split('-')[1], 10);
          }

          const currLevel = nivel;
          const nextLevel = currLevel + 1;
          const currRow   = document.querySelector(`#nivel-${currLevel} .row`);
          const isHiding  = btn.innerText === 'OCULTAR REFERIDOS';

          // 1) Limpiar TODOS los niveles a partir de nextLevel
          for (let lv = nextLevel; lv <= maxLevel; lv++) {
            const row = document.querySelector(`#nivel-${lv} .row`);
            if (row) row.innerHTML = '';
          }

          if (isHiding) {
            // 2) Restaurar visibilidad de todas las tarjetas en el nivel actual
            currRow.querySelectorAll('.col-6, .col-md-4, .col-lg-2')
                   .forEach(col => {
                     col.style.display = '';
                     const b = col.querySelector('button');
                     if (b) b.innerText = 'VER REFERIDOS';
                   });
            return;
          }

          // 3) Ocultar sólo los hermanos en el mismo nivel
          const parentCol = btn.closest('.col-6, .col-md-4, .col-lg-2');
          currRow.querySelectorAll('.col-6, .col-md-4, .col-lg-2')
                 .forEach(col => {
                   if (col !== parentCol) col.style.display = 'none';
                 });

          // 4) Traer y pintar los hijos en el siguiente nivel
          const resp = await fetch(`/Home/GetReferidosPartial?usuarioId=${usuarioId}${typeof nivel === 'number' ? `&nivel=${nivel}` : ''}`);
          if (!resp.ok) {
            console.error('Error cargando referidos de usuario', usuarioId);
            return;
          }
          const html = await resp.text();
          document.querySelector(`#nivel-${nextLevel} .row`).innerHTML = html;

          // 5) Marcar el botón como “OCULTAR REFERIDOS”
          btn.innerText = 'OCULTAR REFERIDOS';
        }
    </script>
}




<style>
.ps__rail-x {
    display: none !important;
}

body, html {
    overflow-x: hidden;
}

.contenedor-referidos {
    overflow-x: hidden;
}
</style>







